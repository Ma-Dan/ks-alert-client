// Code generated by protoc-gen-go. DO NOT EDIT.
// source: suggestion.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// suggestion
type Suggestion struct {
	SuggestionId *SuggestionID `protobuf:"bytes,1,opt,name=suggestion_id" json:"suggestion_id,omitempty"`
	Suggestion   string        `protobuf:"bytes,2,opt,name=suggestion" json:"suggestion,omitempty"`
}

func (m *Suggestion) Reset()                    { *m = Suggestion{} }
func (m *Suggestion) String() string            { return proto.CompactTextString(m) }
func (*Suggestion) ProtoMessage()               {}
func (*Suggestion) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *Suggestion) GetSuggestionId() *SuggestionID {
	if m != nil {
		return m.SuggestionId
	}
	return nil
}

func (m *Suggestion) GetSuggestion() string {
	if m != nil {
		return m.Suggestion
	}
	return ""
}

type SuggestionID struct {
	AlertConfigId string `protobuf:"bytes,1,opt,name=alert_config_id" json:"alert_config_id,omitempty"`
	ResourceId    string `protobuf:"bytes,2,opt,name=resource_id" json:"resource_id,omitempty"`
	AlertRuleId   string `protobuf:"bytes,3,opt,name=alert_rule_id" json:"alert_rule_id,omitempty"`
}

func (m *SuggestionID) Reset()                    { *m = SuggestionID{} }
func (m *SuggestionID) String() string            { return proto.CompactTextString(m) }
func (*SuggestionID) ProtoMessage()               {}
func (*SuggestionID) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *SuggestionID) GetAlertConfigId() string {
	if m != nil {
		return m.AlertConfigId
	}
	return ""
}

func (m *SuggestionID) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *SuggestionID) GetAlertRuleId() string {
	if m != nil {
		return m.AlertRuleId
	}
	return ""
}

type SuggestionResponse struct {
	Suggestion *Suggestion `protobuf:"bytes,2,opt,name=suggestion" json:"suggestion,omitempty"`
	Error      *Error      `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *SuggestionResponse) Reset()                    { *m = SuggestionResponse{} }
func (m *SuggestionResponse) String() string            { return proto.CompactTextString(m) }
func (*SuggestionResponse) ProtoMessage()               {}
func (*SuggestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *SuggestionResponse) GetSuggestion() *Suggestion {
	if m != nil {
		return m.Suggestion
	}
	return nil
}

func (m *SuggestionResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*Suggestion)(nil), "pb.Suggestion")
	proto.RegisterType((*SuggestionID)(nil), "pb.SuggestionID")
	proto.RegisterType((*SuggestionResponse)(nil), "pb.SuggestionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SuggestionHandler service

type SuggestionHandlerClient interface {
	// suggestion
	CreateSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error)
	DeleteSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error)
	UpdateSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error)
	GetSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error)
}

type suggestionHandlerClient struct {
	cc *grpc.ClientConn
}

func NewSuggestionHandlerClient(cc *grpc.ClientConn) SuggestionHandlerClient {
	return &suggestionHandlerClient{cc}
}

func (c *suggestionHandlerClient) CreateSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error) {
	out := new(SuggestionResponse)
	err := grpc.Invoke(ctx, "/pb.SuggestionHandler/CreateSuggestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionHandlerClient) DeleteSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error) {
	out := new(SuggestionResponse)
	err := grpc.Invoke(ctx, "/pb.SuggestionHandler/DeleteSuggestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionHandlerClient) UpdateSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error) {
	out := new(SuggestionResponse)
	err := grpc.Invoke(ctx, "/pb.SuggestionHandler/UpdateSuggestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionHandlerClient) GetSuggestion(ctx context.Context, in *Suggestion, opts ...grpc.CallOption) (*SuggestionResponse, error) {
	out := new(SuggestionResponse)
	err := grpc.Invoke(ctx, "/pb.SuggestionHandler/GetSuggestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SuggestionHandler service

type SuggestionHandlerServer interface {
	// suggestion
	CreateSuggestion(context.Context, *Suggestion) (*SuggestionResponse, error)
	DeleteSuggestion(context.Context, *Suggestion) (*SuggestionResponse, error)
	UpdateSuggestion(context.Context, *Suggestion) (*SuggestionResponse, error)
	GetSuggestion(context.Context, *Suggestion) (*SuggestionResponse, error)
}

func RegisterSuggestionHandlerServer(s *grpc.Server, srv SuggestionHandlerServer) {
	s.RegisterService(&_SuggestionHandler_serviceDesc, srv)
}

func _SuggestionHandler_CreateSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionHandlerServer).CreateSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SuggestionHandler/CreateSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionHandlerServer).CreateSuggestion(ctx, req.(*Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestionHandler_DeleteSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionHandlerServer).DeleteSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SuggestionHandler/DeleteSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionHandlerServer).DeleteSuggestion(ctx, req.(*Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestionHandler_UpdateSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionHandlerServer).UpdateSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SuggestionHandler/UpdateSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionHandlerServer).UpdateSuggestion(ctx, req.(*Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestionHandler_GetSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionHandlerServer).GetSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SuggestionHandler/GetSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionHandlerServer).GetSuggestion(ctx, req.(*Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

var _SuggestionHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SuggestionHandler",
	HandlerType: (*SuggestionHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSuggestion",
			Handler:    _SuggestionHandler_CreateSuggestion_Handler,
		},
		{
			MethodName: "DeleteSuggestion",
			Handler:    _SuggestionHandler_DeleteSuggestion_Handler,
		},
		{
			MethodName: "UpdateSuggestion",
			Handler:    _SuggestionHandler_UpdateSuggestion_Handler,
		},
		{
			MethodName: "GetSuggestion",
			Handler:    _SuggestionHandler_GetSuggestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suggestion.proto",
}

func init() { proto.RegisterFile("suggestion.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x49, 0xf8, 0x90, 0x72, 0x26, 0x10, 0x0e, 0x01, 0x51, 0xa7, 0x2a, 0x0b, 0x9d, 0x32,
	0x84, 0x09, 0x89, 0x09, 0x8a, 0xa0, 0x6b, 0x2b, 0x16, 0x96, 0x2a, 0x69, 0x8e, 0x28, 0x52, 0x14,
	0x5b, 0x67, 0xe7, 0x3f, 0xf0, 0xb3, 0x51, 0x5c, 0x05, 0x13, 0xba, 0x65, 0xf4, 0xeb, 0xe7, 0x7d,
	0xee, 0x2c, 0x19, 0x22, 0xdd, 0x55, 0x15, 0x69, 0x53, 0xcb, 0x36, 0x55, 0x2c, 0x8d, 0x44, 0x5f,
	0x15, 0x33, 0x41, 0xcc, 0x92, 0xf7, 0x41, 0xb2, 0x02, 0xd8, 0xfc, 0x42, 0x78, 0x0f, 0xa1, 0xab,
	0x6c, 0xeb, 0x32, 0xf6, 0xe6, 0xde, 0x42, 0x64, 0x51, 0xaa, 0x8a, 0xd4, 0x61, 0xab, 0x25, 0x22,
	0x80, 0x03, 0x63, 0x7f, 0xee, 0x2d, 0x82, 0x64, 0x03, 0xe7, 0x23, 0xe6, 0x0e, 0x2e, 0xf3, 0x86,
	0xd8, 0x6c, 0x77, 0xb2, 0xfd, 0xaa, 0xab, 0x41, 0x17, 0xe0, 0x35, 0x08, 0x26, 0x2d, 0x3b, 0xde,
	0x51, 0x1f, 0xda, 0x36, 0xde, 0x40, 0xb8, 0xa7, 0xb9, 0x6b, 0x6c, 0x7c, 0x6c, 0xa5, 0x6b, 0x40,
	0x27, 0x5d, 0x93, 0x56, 0xb2, 0xd5, 0x84, 0xc9, 0xc1, 0x78, 0x91, 0x5d, 0x8c, 0x97, 0xc4, 0x18,
	0x4e, 0xed, 0x43, 0xad, 0x48, 0x64, 0x41, 0x7f, 0xfd, 0xda, 0x07, 0xd9, 0xb7, 0x0f, 0x57, 0x0e,
	0x7c, 0xcf, 0xdb, 0xb2, 0x21, 0xc6, 0x27, 0x88, 0x5e, 0x98, 0x72, 0x43, 0x7f, 0x1c, 0xff, 0x9c,
	0xb3, 0xdb, 0xf1, 0x79, 0xd8, 0x27, 0x39, 0xea, 0xdb, 0x4b, 0x6a, 0x68, 0x7a, 0xfb, 0x43, 0x95,
	0x53, 0x67, 0x3f, 0x42, 0xf8, 0x46, 0x66, 0x4a, 0xf5, 0xf9, 0xe4, 0xd3, 0x57, 0x45, 0x71, 0x66,
	0xff, 0xc2, 0xc3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x9e, 0x61, 0xd7, 0x30, 0x02, 0x00,
	0x00,
}
