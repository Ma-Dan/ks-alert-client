// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alertrule.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// alert rule
type AlertRule struct {
	AlertRuleId               string         `protobuf:"bytes,1,opt,name=alert_rule_id" json:"alert_rule_id,omitempty"`
	AlertRuleName             string         `protobuf:"bytes,2,opt,name=alert_rule_name" json:"alert_rule_name,omitempty"`
	RepeatSendType            RepeatSendType `protobuf:"varint,3,opt,name=repeat_send_type,enum=pb.RepeatSendType" json:"repeat_send_type,omitempty"`
	InitReapeatSenderInterval int32          `protobuf:"varint,4,opt,name=init_reapeat_sender_interval" json:"init_reapeat_sender_interval,omitempty"`
	MaxRepeatSendInterval     int32          `protobuf:"varint,5,opt,name=max_repeat_send_interval" json:"max_repeat_send_interval,omitempty"`
	ConsecutiveCount          int32          `protobuf:"varint,6,opt,name=consecutive_count" json:"consecutive_count,omitempty"`
	Period                    int32          `protobuf:"varint,7,opt,name=period" json:"period,omitempty"`
	ConditionType             string         `protobuf:"bytes,8,opt,name=condition_type" json:"condition_type,omitempty"`
	Threshold                 float32        `protobuf:"fixed32,9,opt,name=threshold" json:"threshold,omitempty"`
	Unit                      string         `protobuf:"bytes,10,opt,name=unit" json:"unit,omitempty"`
	PreferSeverity            int32          `protobuf:"varint,11,opt,name=prefer_severity" json:"prefer_severity,omitempty"`
	Enable                    bool           `protobuf:"varint,12,opt,name=enable" json:"enable,omitempty"`
	InhibitRuleEnable         bool           `protobuf:"varint,13,opt,name=inhibit_rule_enable" json:"inhibit_rule_enable,omitempty"`
	MetricId                  string         `protobuf:"bytes,14,opt,name=metric_id" json:"metric_id,omitempty"`
	MetricName                string         `protobuf:"bytes,15,opt,name=metric_name" json:"metric_name,omitempty"`
	RefAlertRuleId            string         `protobuf:"bytes,16,opt,name=ref_alert_rule_id" json:"ref_alert_rule_id,omitempty"`
}

func (m *AlertRule) Reset()                    { *m = AlertRule{} }
func (m *AlertRule) String() string            { return proto.CompactTextString(m) }
func (*AlertRule) ProtoMessage()               {}
func (*AlertRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AlertRule) GetAlertRuleId() string {
	if m != nil {
		return m.AlertRuleId
	}
	return ""
}

func (m *AlertRule) GetAlertRuleName() string {
	if m != nil {
		return m.AlertRuleName
	}
	return ""
}

func (m *AlertRule) GetRepeatSendType() RepeatSendType {
	if m != nil {
		return m.RepeatSendType
	}
	return RepeatSendType_Fixed
}

func (m *AlertRule) GetInitReapeatSenderInterval() int32 {
	if m != nil {
		return m.InitReapeatSenderInterval
	}
	return 0
}

func (m *AlertRule) GetMaxRepeatSendInterval() int32 {
	if m != nil {
		return m.MaxRepeatSendInterval
	}
	return 0
}

func (m *AlertRule) GetConsecutiveCount() int32 {
	if m != nil {
		return m.ConsecutiveCount
	}
	return 0
}

func (m *AlertRule) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *AlertRule) GetConditionType() string {
	if m != nil {
		return m.ConditionType
	}
	return ""
}

func (m *AlertRule) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *AlertRule) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *AlertRule) GetPreferSeverity() int32 {
	if m != nil {
		return m.PreferSeverity
	}
	return 0
}

func (m *AlertRule) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AlertRule) GetInhibitRuleEnable() bool {
	if m != nil {
		return m.InhibitRuleEnable
	}
	return false
}

func (m *AlertRule) GetMetricId() string {
	if m != nil {
		return m.MetricId
	}
	return ""
}

func (m *AlertRule) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *AlertRule) GetRefAlertRuleId() string {
	if m != nil {
		return m.RefAlertRuleId
	}
	return ""
}

type AlertRuleID struct {
	AlertRuleId string `protobuf:"bytes,1,opt,name=alert_rule_id" json:"alert_rule_id,omitempty"`
}

func (m *AlertRuleID) Reset()                    { *m = AlertRuleID{} }
func (m *AlertRuleID) String() string            { return proto.CompactTextString(m) }
func (*AlertRuleID) ProtoMessage()               {}
func (*AlertRuleID) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *AlertRuleID) GetAlertRuleId() string {
	if m != nil {
		return m.AlertRuleId
	}
	return ""
}

type AlertRuleResponse struct {
	AlertRuleId *AlertRuleID `protobuf:"bytes,1,opt,name=alert_rule_id" json:"alert_rule_id,omitempty"`
	AlertRule   *AlertRule   `protobuf:"bytes,2,opt,name=alert_rule" json:"alert_rule,omitempty"`
	Error       *Error       `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *AlertRuleResponse) Reset()                    { *m = AlertRuleResponse{} }
func (m *AlertRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*AlertRuleResponse) ProtoMessage()               {}
func (*AlertRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *AlertRuleResponse) GetAlertRuleId() *AlertRuleID {
	if m != nil {
		return m.AlertRuleId
	}
	return nil
}

func (m *AlertRuleResponse) GetAlertRule() *AlertRule {
	if m != nil {
		return m.AlertRule
	}
	return nil
}

func (m *AlertRuleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// alert rule group
type AlertRuleGroup struct {
	ReceiverGroupId   string `protobuf:"bytes,1,opt,name=receiver_group_id" json:"receiver_group_id,omitempty"`
	ReceiverGroupName string `protobuf:"bytes,2,opt,name=receiver_group_name" json:"receiver_group_name,omitempty"`
	//    Condition condition = 3;
	//    enum Condition {
	//        OR = 0;
	//        AND = 1;
	//        OTHER = 2;
	//    }
	Desc       string       `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	AlertRules []*AlertRule `protobuf:"bytes,4,rep,name=alert_rules" json:"alert_rules,omitempty"`
}

func (m *AlertRuleGroup) Reset()                    { *m = AlertRuleGroup{} }
func (m *AlertRuleGroup) String() string            { return proto.CompactTextString(m) }
func (*AlertRuleGroup) ProtoMessage()               {}
func (*AlertRuleGroup) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *AlertRuleGroup) GetReceiverGroupId() string {
	if m != nil {
		return m.ReceiverGroupId
	}
	return ""
}

func (m *AlertRuleGroup) GetReceiverGroupName() string {
	if m != nil {
		return m.ReceiverGroupName
	}
	return ""
}

func (m *AlertRuleGroup) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AlertRuleGroup) GetAlertRules() []*AlertRule {
	if m != nil {
		return m.AlertRules
	}
	return nil
}

func init() {
	proto.RegisterType((*AlertRule)(nil), "pb.AlertRule")
	proto.RegisterType((*AlertRuleID)(nil), "pb.AlertRuleID")
	proto.RegisterType((*AlertRuleResponse)(nil), "pb.AlertRuleResponse")
	proto.RegisterType((*AlertRuleGroup)(nil), "pb.AlertRuleGroup")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AlertRuleHandler service

type AlertRuleHandlerClient interface {
	// alert rule
	CreateAlertRule(ctx context.Context, in *AlertRule, opts ...grpc.CallOption) (*AlertRuleResponse, error)
	DeleteAlertRule(ctx context.Context, in *AlertRuleID, opts ...grpc.CallOption) (*AlertRuleResponse, error)
	UpdateAlertRule(ctx context.Context, in *AlertRule, opts ...grpc.CallOption) (*AlertRuleResponse, error)
	GetAlertRule(ctx context.Context, in *AlertRuleID, opts ...grpc.CallOption) (*AlertRuleResponse, error)
}

type alertRuleHandlerClient struct {
	cc *grpc.ClientConn
}

func NewAlertRuleHandlerClient(cc *grpc.ClientConn) AlertRuleHandlerClient {
	return &alertRuleHandlerClient{cc}
}

func (c *alertRuleHandlerClient) CreateAlertRule(ctx context.Context, in *AlertRule, opts ...grpc.CallOption) (*AlertRuleResponse, error) {
	out := new(AlertRuleResponse)
	err := grpc.Invoke(ctx, "/pb.AlertRuleHandler/CreateAlertRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertRuleHandlerClient) DeleteAlertRule(ctx context.Context, in *AlertRuleID, opts ...grpc.CallOption) (*AlertRuleResponse, error) {
	out := new(AlertRuleResponse)
	err := grpc.Invoke(ctx, "/pb.AlertRuleHandler/DeleteAlertRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertRuleHandlerClient) UpdateAlertRule(ctx context.Context, in *AlertRule, opts ...grpc.CallOption) (*AlertRuleResponse, error) {
	out := new(AlertRuleResponse)
	err := grpc.Invoke(ctx, "/pb.AlertRuleHandler/UpdateAlertRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertRuleHandlerClient) GetAlertRule(ctx context.Context, in *AlertRuleID, opts ...grpc.CallOption) (*AlertRuleResponse, error) {
	out := new(AlertRuleResponse)
	err := grpc.Invoke(ctx, "/pb.AlertRuleHandler/GetAlertRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlertRuleHandler service

type AlertRuleHandlerServer interface {
	// alert rule
	CreateAlertRule(context.Context, *AlertRule) (*AlertRuleResponse, error)
	DeleteAlertRule(context.Context, *AlertRuleID) (*AlertRuleResponse, error)
	UpdateAlertRule(context.Context, *AlertRule) (*AlertRuleResponse, error)
	GetAlertRule(context.Context, *AlertRuleID) (*AlertRuleResponse, error)
}

func RegisterAlertRuleHandlerServer(s *grpc.Server, srv AlertRuleHandlerServer) {
	s.RegisterService(&_AlertRuleHandler_serviceDesc, srv)
}

func _AlertRuleHandler_CreateAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertRuleHandlerServer).CreateAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AlertRuleHandler/CreateAlertRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertRuleHandlerServer).CreateAlertRule(ctx, req.(*AlertRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertRuleHandler_DeleteAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRuleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertRuleHandlerServer).DeleteAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AlertRuleHandler/DeleteAlertRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertRuleHandlerServer).DeleteAlertRule(ctx, req.(*AlertRuleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertRuleHandler_UpdateAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertRuleHandlerServer).UpdateAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AlertRuleHandler/UpdateAlertRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertRuleHandlerServer).UpdateAlertRule(ctx, req.(*AlertRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertRuleHandler_GetAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRuleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertRuleHandlerServer).GetAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AlertRuleHandler/GetAlertRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertRuleHandlerServer).GetAlertRule(ctx, req.(*AlertRuleID))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertRuleHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AlertRuleHandler",
	HandlerType: (*AlertRuleHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertRule",
			Handler:    _AlertRuleHandler_CreateAlertRule_Handler,
		},
		{
			MethodName: "DeleteAlertRule",
			Handler:    _AlertRuleHandler_DeleteAlertRule_Handler,
		},
		{
			MethodName: "UpdateAlertRule",
			Handler:    _AlertRuleHandler_UpdateAlertRule_Handler,
		},
		{
			MethodName: "GetAlertRule",
			Handler:    _AlertRuleHandler_GetAlertRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alertrule.proto",
}

func init() { proto.RegisterFile("alertrule.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x69, 0x12, 0xea, 0x71, 0x12, 0x27, 0x1b, 0x15, 0xb6, 0x29, 0x07, 0x63, 0x55, 0x28,
	0x07, 0x94, 0x43, 0xb8, 0x50, 0x71, 0x02, 0x8a, 0x0a, 0xd7, 0x00, 0x17, 0x2e, 0x2b, 0x7f, 0x4c,
	0xc9, 0x4a, 0xce, 0x7a, 0x35, 0x5e, 0x47, 0x0d, 0x3f, 0x86, 0xbf, 0x0a, 0xf2, 0xc6, 0x71, 0x92,
	0x42, 0x2f, 0x3d, 0xee, 0x7b, 0x6f, 0xde, 0x8c, 0xdf, 0x8c, 0xc1, 0x8f, 0x32, 0x24, 0x43, 0x65,
	0x86, 0x33, 0x4d, 0xb9, 0xc9, 0x59, 0x4b, 0xc7, 0x13, 0x0f, 0x89, 0x72, 0xda, 0x02, 0x93, 0x21,
	0xa1, 0xc6, 0xc8, 0x14, 0xa8, 0xd2, 0x2d, 0x12, 0xfe, 0x3e, 0x01, 0xf7, 0x7d, 0x55, 0xb6, 0x28,
	0x33, 0x64, 0x67, 0xd0, 0xb7, 0x1e, 0xa2, 0x32, 0x11, 0x32, 0xe5, 0x4e, 0xe0, 0x4c, 0x5d, 0xf6,
	0xbc, 0xb6, 0xde, 0xc2, 0x2a, 0x5a, 0x21, 0x6f, 0x59, 0xe2, 0x35, 0xd4, 0x8e, 0xa2, 0xb2, 0x14,
	0x66, 0xa3, 0x91, 0x9f, 0x04, 0xce, 0x74, 0x30, 0x67, 0x33, 0x1d, 0xcf, 0x16, 0x96, 0xfb, 0x8a,
	0x2a, 0xfd, 0xb6, 0xd1, 0xc8, 0x2e, 0xe1, 0x85, 0x54, 0xd2, 0x08, 0xc2, 0xa8, 0xa9, 0x41, 0x12,
	0x52, 0x19, 0xa4, 0x75, 0x94, 0xf1, 0x76, 0xe0, 0x4c, 0x3b, 0x2c, 0x00, 0xbe, 0x8a, 0xee, 0xc4,
	0xa1, 0x6f, 0xa3, 0xe8, 0x58, 0xc5, 0x39, 0x8c, 0x92, 0x5c, 0x15, 0x98, 0x94, 0x46, 0xae, 0x51,
	0x24, 0x79, 0xa9, 0x0c, 0xef, 0x5a, 0x6a, 0x00, 0x5d, 0x8d, 0x24, 0xf3, 0x94, 0x3f, 0xb5, 0xef,
	0x67, 0x30, 0x48, 0x72, 0x95, 0x4a, 0x23, 0x73, 0xb5, 0x1d, 0xef, 0xd4, 0x0e, 0x3e, 0x02, 0xd7,
	0x2c, 0x09, 0x8b, 0x65, 0x9e, 0xa5, 0xdc, 0x0d, 0x9c, 0x69, 0x8b, 0xf5, 0xa0, 0x5d, 0x2a, 0x69,
	0x38, 0xec, 0x3e, 0x59, 0x13, 0xde, 0x22, 0x89, 0x02, 0xd7, 0x48, 0xd2, 0x6c, 0xb8, 0xb7, 0xeb,
	0x80, 0x2a, 0x8a, 0x33, 0xe4, 0xbd, 0xc0, 0x99, 0x9e, 0xb2, 0x0b, 0x18, 0x4b, 0xb5, 0x94, 0xb1,
	0xac, 0xd3, 0xa9, 0xc9, 0xbe, 0x25, 0x47, 0xe0, 0xae, 0xd0, 0x90, 0x4c, 0xaa, 0x2c, 0x07, 0xd6,
	0x78, 0x0c, 0x5e, 0x0d, 0xd9, 0x1c, 0x7d, 0x0b, 0x9e, 0xc3, 0x88, 0xf0, 0x56, 0x1c, 0x67, 0x3f,
	0xac, 0xa8, 0xf0, 0x12, 0xbc, 0x66, 0x3f, 0x5f, 0xae, 0x1f, 0xd8, 0x50, 0x78, 0x07, 0xa3, 0x46,
	0xb5, 0xc0, 0x42, 0x57, 0xf1, 0xb0, 0x57, 0xff, 0xd3, 0x7a, 0x73, 0xbf, 0x5a, 0xcd, 0xa1, 0xe7,
	0x4b, 0x80, 0xbd, 0xce, 0x6e, 0xd6, 0x9b, 0xf7, 0x8f, 0x44, 0x8c, 0x43, 0xc7, 0xde, 0x91, 0xdd,
	0xae, 0x37, 0x77, 0x2b, 0xf6, 0x53, 0x05, 0x84, 0xbf, 0x60, 0xd0, 0xc8, 0x6e, 0x28, 0x2f, 0xf5,
	0xf6, 0x63, 0x12, 0x94, 0x6b, 0x24, 0xf1, 0xb3, 0x42, 0xf6, 0x87, 0x74, 0x01, 0xe3, 0x7b, 0xd4,
	0xc1, 0x31, 0xf5, 0xa0, 0x9d, 0x62, 0x91, 0xd8, 0x16, 0x2e, 0x0b, 0xc1, 0xdb, 0x0f, 0x55, 0xf0,
	0x76, 0x70, 0xf2, 0xcf, 0x54, 0xf3, 0x3f, 0x0e, 0x0c, 0x9b, 0xd7, 0xe7, 0x48, 0xa5, 0x19, 0x12,
	0xbb, 0x02, 0xff, 0x23, 0x61, 0x64, 0x70, 0x3f, 0xfd, 0x71, 0xd9, 0xe4, 0xec, 0xe8, 0xb9, 0x8b,
	0x2b, 0x7c, 0xc2, 0xde, 0x81, 0x7f, 0x8d, 0x19, 0x1e, 0x96, 0xde, 0x0f, 0xeb, 0xe1, 0xe2, 0x2b,
	0xf0, 0xbf, 0xeb, 0xf4, 0x51, 0x7d, 0xdf, 0x42, 0xef, 0x06, 0xcd, 0x23, 0x9a, 0x7e, 0x68, 0xff,
	0x68, 0xe9, 0x38, 0xee, 0xda, 0x7f, 0xf9, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xf9,
	0x66, 0xb3, 0x01, 0x04, 0x00, 0x00,
}
