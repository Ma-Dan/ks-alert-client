// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ent.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Enterprise struct {
	EnterpriseId   string `protobuf:"bytes,1,opt,name=enterprise_id" json:"enterprise_id,omitempty"`
	EnterpriseName string `protobuf:"bytes,2,opt,name=enterprise_name" json:"enterprise_name,omitempty"`
	HomePage       string `protobuf:"bytes,3,opt,name=home_page" json:"home_page,omitempty"`
	Address        string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Phone          string `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	Email          string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Contacts       string `protobuf:"bytes,7,opt,name=contacts" json:"contacts,omitempty"`
	Desc           string `protobuf:"bytes,8,opt,name=desc" json:"desc,omitempty"`
}

func (m *Enterprise) Reset()                    { *m = Enterprise{} }
func (m *Enterprise) String() string            { return proto.CompactTextString(m) }
func (*Enterprise) ProtoMessage()               {}
func (*Enterprise) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Enterprise) GetEnterpriseId() string {
	if m != nil {
		return m.EnterpriseId
	}
	return ""
}

func (m *Enterprise) GetEnterpriseName() string {
	if m != nil {
		return m.EnterpriseName
	}
	return ""
}

func (m *Enterprise) GetHomePage() string {
	if m != nil {
		return m.HomePage
	}
	return ""
}

func (m *Enterprise) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Enterprise) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Enterprise) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Enterprise) GetContacts() string {
	if m != nil {
		return m.Contacts
	}
	return ""
}

func (m *Enterprise) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type EnterpriseID struct {
	EnterpriseId string `protobuf:"bytes,1,opt,name=enterprise_id" json:"enterprise_id,omitempty"`
}

func (m *EnterpriseID) Reset()                    { *m = EnterpriseID{} }
func (m *EnterpriseID) String() string            { return proto.CompactTextString(m) }
func (*EnterpriseID) ProtoMessage()               {}
func (*EnterpriseID) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *EnterpriseID) GetEnterpriseId() string {
	if m != nil {
		return m.EnterpriseId
	}
	return ""
}

type EnterpriseResponse struct {
	EnterpriseId string      `protobuf:"bytes,1,opt,name=enterprise_id" json:"enterprise_id,omitempty"`
	Enterprise   *Enterprise `protobuf:"bytes,2,opt,name=enterprise" json:"enterprise,omitempty"`
	Error        *Error      `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *EnterpriseResponse) Reset()                    { *m = EnterpriseResponse{} }
func (m *EnterpriseResponse) String() string            { return proto.CompactTextString(m) }
func (*EnterpriseResponse) ProtoMessage()               {}
func (*EnterpriseResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *EnterpriseResponse) GetEnterpriseId() string {
	if m != nil {
		return m.EnterpriseId
	}
	return ""
}

func (m *EnterpriseResponse) GetEnterprise() *Enterprise {
	if m != nil {
		return m.Enterprise
	}
	return nil
}

func (m *EnterpriseResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*Enterprise)(nil), "pb.Enterprise")
	proto.RegisterType((*EnterpriseID)(nil), "pb.EnterpriseID")
	proto.RegisterType((*EnterpriseResponse)(nil), "pb.EnterpriseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EnterpriseHandler service

type EnterpriseHandlerClient interface {
	// enterprise
	CreateEnterprise(ctx context.Context, in *Enterprise, opts ...grpc.CallOption) (*EnterpriseResponse, error)
	DeleteEnterprise(ctx context.Context, in *EnterpriseID, opts ...grpc.CallOption) (*EnterpriseResponse, error)
	UpdateEnterprise(ctx context.Context, in *Enterprise, opts ...grpc.CallOption) (*EnterpriseResponse, error)
	GetEnterprise(ctx context.Context, in *EnterpriseID, opts ...grpc.CallOption) (*EnterpriseResponse, error)
}

type enterpriseHandlerClient struct {
	cc *grpc.ClientConn
}

func NewEnterpriseHandlerClient(cc *grpc.ClientConn) EnterpriseHandlerClient {
	return &enterpriseHandlerClient{cc}
}

func (c *enterpriseHandlerClient) CreateEnterprise(ctx context.Context, in *Enterprise, opts ...grpc.CallOption) (*EnterpriseResponse, error) {
	out := new(EnterpriseResponse)
	err := grpc.Invoke(ctx, "/pb.EnterpriseHandler/CreateEnterprise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseHandlerClient) DeleteEnterprise(ctx context.Context, in *EnterpriseID, opts ...grpc.CallOption) (*EnterpriseResponse, error) {
	out := new(EnterpriseResponse)
	err := grpc.Invoke(ctx, "/pb.EnterpriseHandler/DeleteEnterprise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseHandlerClient) UpdateEnterprise(ctx context.Context, in *Enterprise, opts ...grpc.CallOption) (*EnterpriseResponse, error) {
	out := new(EnterpriseResponse)
	err := grpc.Invoke(ctx, "/pb.EnterpriseHandler/UpdateEnterprise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseHandlerClient) GetEnterprise(ctx context.Context, in *EnterpriseID, opts ...grpc.CallOption) (*EnterpriseResponse, error) {
	out := new(EnterpriseResponse)
	err := grpc.Invoke(ctx, "/pb.EnterpriseHandler/GetEnterprise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EnterpriseHandler service

type EnterpriseHandlerServer interface {
	// enterprise
	CreateEnterprise(context.Context, *Enterprise) (*EnterpriseResponse, error)
	DeleteEnterprise(context.Context, *EnterpriseID) (*EnterpriseResponse, error)
	UpdateEnterprise(context.Context, *Enterprise) (*EnterpriseResponse, error)
	GetEnterprise(context.Context, *EnterpriseID) (*EnterpriseResponse, error)
}

func RegisterEnterpriseHandlerServer(s *grpc.Server, srv EnterpriseHandlerServer) {
	s.RegisterService(&_EnterpriseHandler_serviceDesc, srv)
}

func _EnterpriseHandler_CreateEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enterprise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseHandlerServer).CreateEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EnterpriseHandler/CreateEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseHandlerServer).CreateEnterprise(ctx, req.(*Enterprise))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseHandler_DeleteEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseHandlerServer).DeleteEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EnterpriseHandler/DeleteEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseHandlerServer).DeleteEnterprise(ctx, req.(*EnterpriseID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseHandler_UpdateEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enterprise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseHandlerServer).UpdateEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EnterpriseHandler/UpdateEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseHandlerServer).UpdateEnterprise(ctx, req.(*Enterprise))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseHandler_GetEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseHandlerServer).GetEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EnterpriseHandler/GetEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseHandlerServer).GetEnterprise(ctx, req.(*EnterpriseID))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnterpriseHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EnterpriseHandler",
	HandlerType: (*EnterpriseHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnterprise",
			Handler:    _EnterpriseHandler_CreateEnterprise_Handler,
		},
		{
			MethodName: "DeleteEnterprise",
			Handler:    _EnterpriseHandler_DeleteEnterprise_Handler,
		},
		{
			MethodName: "UpdateEnterprise",
			Handler:    _EnterpriseHandler_UpdateEnterprise_Handler,
		},
		{
			MethodName: "GetEnterprise",
			Handler:    _EnterpriseHandler_GetEnterprise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ent.proto",
}

func init() { proto.RegisterFile("ent.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x5d, 0x6d, 0xb7, 0xf5, 0xed, 0xea, 0xba, 0x80, 0x1a, 0x76, 0x92, 0x82, 0xe0, 0xa9,
	0x87, 0x7a, 0x74, 0x78, 0xd0, 0x8a, 0xee, 0x2a, 0x78, 0xf1, 0x32, 0xd2, 0xe6, 0xc5, 0x15, 0xda,
	0x24, 0x24, 0xf9, 0x18, 0x7e, 0x06, 0x3f, 0xab, 0x2c, 0x32, 0xdb, 0x0a, 0xf3, 0xb0, 0xe3, 0xf3,
	0xcb, 0xfb, 0xe7, 0x79, 0x5e, 0x02, 0x21, 0x0a, 0x9b, 0x29, 0x2d, 0xad, 0x24, 0x9e, 0x2a, 0x97,
	0x11, 0x6a, 0x2d, 0xf5, 0x0f, 0x48, 0xbf, 0x46, 0x00, 0x4f, 0xc2, 0xa2, 0x56, 0xba, 0x36, 0x48,
	0xce, 0x21, 0xc6, 0x5f, 0xb5, 0xa9, 0x39, 0x1d, 0x5d, 0x8d, 0x6e, 0x42, 0x72, 0x09, 0xf3, 0x1e,
	0x16, 0xac, 0x45, 0xea, 0xb9, 0x87, 0x05, 0x84, 0x5b, 0xd9, 0xe2, 0x46, 0xb1, 0x0f, 0xa4, 0xa7,
	0x0e, 0xcd, 0x61, 0xc2, 0x38, 0xd7, 0x68, 0x0c, 0xf5, 0x1d, 0x88, 0x21, 0x50, 0x5b, 0x29, 0x90,
	0x06, 0x7b, 0x89, 0x2d, 0xab, 0x1b, 0x3a, 0x76, 0x32, 0x81, 0x69, 0x25, 0x85, 0x65, 0x95, 0x35,
	0x74, 0xe2, 0xc8, 0x0c, 0x7c, 0x8e, 0xa6, 0xa2, 0xd3, 0x9d, 0x4a, 0xaf, 0x61, 0xd6, 0xf9, 0x5b,
	0x17, 0x07, 0x1c, 0xa6, 0x35, 0x90, 0xae, 0xec, 0x15, 0x8d, 0x92, 0xe2, 0x70, 0x9c, 0x14, 0xa0,
	0xc3, 0x2e, 0x49, 0x94, 0x9f, 0x65, 0xaa, 0xcc, 0x7a, 0x97, 0xa0, 0x10, 0xb8, 0x3b, 0xb9, 0x54,
	0x51, 0x1e, 0xba, 0xe7, 0x1d, 0xc8, 0x3f, 0x3d, 0x58, 0x74, 0x85, 0x2f, 0x4c, 0xf0, 0x06, 0x35,
	0x59, 0x41, 0xf2, 0xa8, 0x91, 0x59, 0xec, 0xcd, 0xf8, 0x33, 0x73, 0x79, 0x31, 0xd4, 0x7b, 0x9b,
	0xe9, 0x09, 0xb9, 0x87, 0xa4, 0xc0, 0x06, 0x07, 0xdd, 0xc9, 0xb0, 0x7a, 0x5d, 0xfc, 0xd3, 0xbf,
	0x82, 0xe4, 0x4d, 0xf1, 0x63, 0xb7, 0xdf, 0x41, 0xfc, 0x8c, 0xf6, 0xb8, 0xd5, 0x0f, 0xfe, 0xbb,
	0xa7, 0xca, 0x72, 0xec, 0xbe, 0xd3, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x85, 0x47,
	0xfd, 0x6c, 0x02, 0x00, 0x00,
}
